#!/usr/bin/env python
# Roboteq NxtGen Controller configuration

PACKAGE='roboteq_nxtgen_controller'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("acceleration", int_t, SensorLevels.RECONFIGURE_RUNNING, "The acceleration in 0.1 * RPM/s for both motor channels.", 2000, 0, 65535) # 65535 is just a guess
gen.add("deceleration", int_t, SensorLevels.RECONFIGURE_RUNNING, "The deceleration in 0.1 * RPM/s for both motor channels.", 2000, 0, 65535) # 65535 is just a guess

cmd_linearity_enum = gen.enum([ gen.const("Linear", int_t, 0, "Linear commands"),
				gen.const("WeakExp", int_t, 1, "Weak exponential commands"),
				gen.const("MediumExp", int_t, 2, "Medium exponential commands"),
				gen.const("StrongExp", int_t, 3, "Strong exponential commands"),
				gen.const("WeakLog", int_t, 4, "Weak logarithmic commands"),
				gen.const("MediumLog", int_t, 5, "Medium logarithmic commands"),
				gen.const("StrongLog", int_t, 6, "Strong logarithmic commands") ],
				"command linearity")

gen.add("command_linearity", int_t, SensorLevels.RECONFIGURE_RUNNING, "Command input transformation.", 0, 0, 6, edit_method=cmd_linearity_enum)

exit(gen.generate(PACKAGE, "nxtgen_driver_node", "RoboteqNxtGen"))
